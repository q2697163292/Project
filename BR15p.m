function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 09-Apr-2024 12:08:24.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [250;25];
x1_step1.gain = [0.00266666666666667;0.08];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.038013711740237522696;-0.3659010343654297559;0.044817288756082464263;-0.03891013631057081007;0.047320310190534863037;-0.075249150405018006005;-0.055856149178109708309;0.063128928177692555934;0.053231224146815123155;0.061603161736570460905;-0.075216842602821812336;0.045743506675046001486;-0.1710367025195256574;0.082072145979750085742;0.083657902500742231666];
IW1_1 = [-0.079908503368936414923 -0.00066493107792838738318;0.077889259296818474931 -0.26095176140531961551;0.080000465094655998088 -0.00069413289188528467556;-0.079928019177871206802 -0.00064229051818440511222;0.08008462617342042289 -0.00045853700104352303332;-0.080725900270143507997 0.0039252062811186635982;-0.080261073796716958517 0.0015469933159535844552;0.080428156876458919977 -0.0024514176352972540454;0.080206958350040796768 -0.0011997801324090426149;0.08039301178246673063 -0.0022594828396757722123;-0.080727679894904605384 0.0039336737921885434402;0.080049172562504683492 -0.00032585318127239192541;-0.16699936170641024868 -0.38483300359268712842;0.08091740190818680345 -0.0047826061424576741393;0.080968152735953119459 -0.0050199809616717615962];

% Layer 2
b2 = -0.485973041705028308;
LW2_1 = [-0.8542018890881211135 0.87872664385779908347 0.71484830262537957246 -0.87397205802593003199 0.86058111592519270783 -0.82204788646358339932 -0.84832818640241380859 0.8504078933150389652 0.86102924519525236846 0.85394116698560029732 -0.83075367451141646224 0.83968128526747298768 -0.38607611345799874858 0.83478374178896508351 0.85205893613208694148];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0261799659907123;
y1_step1.xoffset = 24.3270517937953;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
