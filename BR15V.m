function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 09-Apr-2024 12:50:49.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timbrBBestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [250;25];
x1_step1.gain = [0.00266666666666667;0.08];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.52750317449290495819;-0.178033773271242729;-0.21847918557475434764;-0.83651693997623000065;10.428962734297298809;-1.1019816552073398164;8.3470910672983169576;5.1735752774026684264;6.8137041756686187455;-10.090193589372102423;-0.21565118358215631944;0.86094321413018504163;0.5006963036324291183;-0.11223057280406105451;1.7185107560618801958];
IW1_1 = [-0.44807126754566001248 2.1717698739526847262;1.4504312671753687436 -0.76824647164177717329;4.0291400237310632804 4.473557298721185127;-5.3671620844770302483 0.86640323430295207441;-13.438422782876813244 -2.5180588646149306697;6.2479302118708321956 4.2090421550456227351;17.147878621451773995 -8.2869210659061565138;-4.9714839042951997072 -0.038301835166035094749;14.273874105139164215 -7.267114721898551899;17.017197651429761152 6.112948196989566263;-2.7767756541942851811 1.959188057775766989;-3.2694045752432536744 -5.4536205797472012691;-0.3162896170731870904 -0.71362233904492022862;-2.3157390069981742542 -0.065539385081883116957;-17.870572591361877812 -0.78185349991340113984];

% Layer 2
b2 = -3.7833459872287975578;
LW2_1 = [-0.42144164401496353456 4.1230695363042784152 -1.5293050085407782213 0.41117584619554176095 -5.837983229395553586 1.3125481510634324778 -2.2494158318980876921 6.6672517843426435391 2.9495252098992534862 -3.1455345550443682967 1.6180684810474392776 0.26196271950141958307 -1.2629637672987044095 1.7257014029266153354 -0.052619033411758282803];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0900340330547069;
y1_step1.xoffset = 252.523929738118;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
