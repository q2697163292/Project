function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 09-Apr-2024 11:56:49.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [250;25];
x1_step1.gain = [0.00266666666666667;0.08];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.9047448236200512639;-4.2173006257687575271;-3.857325228265106265;-2.6585942235399717681;-1.8573742561051014288;1.3591758562304121494;0.75114479637460784822;0.36429948553894320185;1.779687291089143919;-1.7137025715673790405;2.395301647194194139;-3.3555191074597310319;4.4365738253016280268;-3.9966518654210876349;-5.8028241362486419064];
IW1_1 = [1.7427149089166358298 -4.0440241749970109453;4.5401799000708953358 1.2001377286192931315;6.1171662254102656675 -0.76590365557498429894;4.8870892214699921396 -1.6727731639398111252;1.2325038818485392067 5.1846365893495693911;-5.2889115782045239555 1.4035977006102775544;-5.1287479427887197048 0.79729672526810924094;-2.4884485715950215301 4.553597663902996473;5.3441958777974836181 -3.8879455358602017512;-4.2676922312323464226 3.4098169380489458113;4.7415609008839672001 3.3276146318913619737;-4.8062871480370823463 -2.0337161237364811406;5.2722139039695701257 0.28259170490504809115;-1.3511249222279722026 -4.4948060380811130088;-3.0596332857453645282 -4.1021519547212381696];

% Layer 2
b2 = 1.3680102413537638117;
LW2_1 = [1.1478245999637102237 -0.076810522250382526344 -0.0027345133864576892484 0.11117933793529687081 -0.0020997104868201586954 0.29920565363111983892 -0.34562016467522677088 -0.0048480567673441594609 0.45786223269745629505 0.75061751585410496634 -0.12117486812103686611 -0.032809016521790530796 0.066236158671694286837 -0.66328308623722354032 -0.19729843829196949678];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0261799659907123;
y1_step1.xoffset = 24.3270517937953;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
