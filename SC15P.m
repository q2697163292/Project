function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 09-Apr-2024 12:12:34.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [250;25];
x1_step1.gain = [0.00266666666666667;0.08];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.7653275536366423992;4.5411273119432076228;-3.8991554114412081411;-3.3864852003409584569;2.3064860822707036192;-1.336129994713299407;0.72195480982476611942;-0.18280669857968281922;0.82820828877055652217;1.8040001010770907452;-2.2292562166586011863;-2.8718326974875303392;4.0686511964349438841;-5.0505699616531423146;-5.6766205750641578476];
IW1_1 = [3.6612475310692991215 3.484989255172379341;-4.3632201136708550493 3.3181660702867192825;5.1777985644071264915 -1.4848256668640165135;-0.25434928983407251168 5.0041296892360564996;-3.1770090881140347072 -4.3995433168570574622;3.7237009020778910617 4.0161775861679371857;-5.0256030053683140579 2.0276114468501469368;5.2965655295555205129 -0.55410494216752137486;3.0987153480882150269 -4.3342173493660887118;0.46249719672976175033 -5.3407133328605258527;-0.86072072397123577936 -5.4798294723558802488;-2.7105105201280976779 -5.0036180103337350999;5.2068330817249659503 -0.52934156970242107754;-2.3609675061972663634 -4.4626637178077777079;-0.9873930081238615486 5.110055279934988981];

% Layer 2
b2 = 0.5608417260464122478;
LW2_1 = [0.72876755654882008351 -0.088375069693398894399 -0.018747125730947240135 -0.47213843906463270894 -0.098122292007620529053 -0.76908139853227974747 0.1102258447102999056 -0.038454533688191586127 -0.021681473670424621786 0.29859024016606811047 -0.55240635934070925206 -0.43128415726925323215 0.15655282853738108906 -0.66980880085354577158 0.62806099227648870542];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0261799659907123;
y1_step1.xoffset = 24.3270517937953;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
